---
title: "Participants"
author: "Stan Brouwer"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 1
    embed-resources: true
    # standalone: true
    smooth-scroll: true
    page-layout: full
    code-fold: show
    grid:
      sidebar-width: 180px
editor: source
number-sections: false
---

# Analysis of participants' characteristics

Lets analyse participants characteristics for equality of variance, normality.

::: column-page-right

```{r LoadData, message = FALSE, verbose = FALSE, echo=FALSE}
# Clean workspace
rm(list = ls())
library(tidyr)
library(dplyr)
library(plotly)
library(ggplot2)
library(knitr)
library(lubridate)

# Most dependencies are loaded by loading datafiltering.qmd.
# To load only the chuncks containing functions we need parsermd
library(parsermd)

toload <- c("load_data","load_plots", "filter_data", "separate_lifts", "visualise_seperate_lifts", "loadXsenseData2")
rmd <- parse_rmd("datafiltering.qmd")


for (i in seq_along(toload)) {
  setup_chunk <- rmd_select(rmd, toload[i]) |> 
    as_document()

  setup_chunk <- setup_chunk[-grep("```", setup_chunk)]
  setup_chunk
#> [1] "library(tidyr)"   "library(stringr)" ""                

  eval(parse(text = setup_chunk))             
}
rm(rmd, i, setup_chunk, toload)

# Load participant data
data <- read.csv("../../Logs/participants.csv", header = TRUE, sep = ";")
```

The reported participants' data with the names blurred:
```{r}
data <- read.csv("../../Logs/participants.csv", header = TRUE, sep = ";")
knitr::kable(data[ ,2:8], caption = "Table X: Participant characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```



## Some simple descriptives

Start by calculating means and std. I took some steps to format it to [mean ± std] format

```{r lets_go, message=FALSE, warning=FALSE}

# Calculate the number of participants overall and by sex
count_summary <- data %>%
  group_by(Sex) %>%
  summarise(count = n()) %>%
  bind_rows(summarise(data, Sex = "Overall", count = n()))

# Calculate the summary statistics for all subjects
overall_summary <- data %>%
  summarise(across(c(Age, Height, Mass, Experience, Reported1rm), 
                   list(mean = ~ round(mean(.x, na.rm = TRUE),2), 
                        sd = ~ round(sd(.x, na.rm = TRUE)))),2)

# Calculate the summary statistics by sex
sex_summary <- data %>%
  group_by(Sex) %>%
  summarise(across(c(Age, Height, Mass, Experience, Reported1rm), 
                   list(mean = ~ round(mean(.x, na.rm = TRUE),2), 
                        sd = ~ round(sd(.x, na.rm = TRUE)))),2)

# Combine the summaries into a single table
summary_table <- bind_rows(
  overall_summary %>% mutate(Sex = "Overall"),
  sex_summary
)

# Reshape the table for better visualization
summary_table <- summary_table %>%
  pivot_longer(cols = -Sex, 
               names_to = c("variable", ".value"), 
               names_sep = "_") %>%
  pivot_wider(names_from = Sex, values_from = c(mean, sd))

# Combine mean and sd into a single column
summary_table <- summary_table %>%
  mutate(across(ends_with("_Overall"), ~ ifelse(is.na(.), "", as.character(.))),
         Overall = paste0(mean_Overall, " ± ", sd_Overall)) %>%
  mutate(across(ends_with("_male"), ~ ifelse(is.na(.), "", as.character(.))),
         male = paste0(mean_male, " ± ", sd_male)) %>%
  mutate(across(ends_with("_female"), ~ ifelse(is.na(.), "", as.character(.))),
         female = paste0(mean_female, " ± ", sd_female)) %>%
  select(variable, Overall, male, female)

# Prepare the participant counts in the correct format
participant_counts <- count_summary %>%
  pivot_wider(names_from = Sex, values_from = count) %>%
  mutate(variable = "count",
         Overall = as.character(Overall),
         male = as.character(male),
         female = as.character(female))

# Combine the participant counts with the summary statistics
final_summary_table <- bind_rows(participant_counts, summary_table)

# Correct the NA values for combined mean ± sd columns
final_summary_table <- final_summary_table %>%
  mutate(Overall = ifelse(is.na(Overall), "", Overall),
         male = ifelse(is.na(male), "", male),
         female = ifelse(is.na(female), "", female))

# Change the order of the columns, edit some names
final_summary_table <- final_summary_table %>%
  select(variable, Overall, male, female)
final_summary_table$variable[1] <- "Participants"
final_summary_table$variable[2] <- "Age (years)"
final_summary_table$variable[3] <- "Height (cm)"
final_summary_table$variable[4] <- "Body mass (kg)"
final_summary_table$variable[5] <- "Experience (months)"
final_summary_table$variable[6] <- "Reported 1RM (kg)"

library(gtExtras)
# Print the table using knitr::kable
knitr::kable(final_summary_table[1:6,], caption = "Table X: summary of participant characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```
As expected some differences between genders seem to exists. Differences on height, body mass and reported 1rm are expected. However, age and experience should be similar to (try to) eliminate confounding.

## Levene's test
Lets run levene's test to determine equality of variance 

```{r, message=FALSE, warning=FALSE}

library(car)

# Get the numerical columns from the dataframe
num_cols <- sapply(data, is.numeric)

# Exclude the column 'Sex' as it is categorical
num_cols <- num_cols & names(data) != "Sex"

# Initialize a list to store the test results
levene_results <- list()

# Perform Levene's test for each numerical column
for (col in names(data)[num_cols]) {
  test_result <- leveneTest(data[[col]] ~ data$Sex)
  levene_results[[col]] <- test_result
}

# Extract the necessary information from the test results
results_table <- data.frame(
  Variable = character(),
  F_Value = numeric(),
  Pr_Greater_F = numeric(),
  stringsAsFactors = FALSE
)

for (col in names(levene_results)) {
  test_result <- levene_results[[col]]
  results_table <- rbind(results_table, data.frame(
    Variable = col,
    F_Value = round(test_result$`F value`[1],2),
    Pr_Greater_F = round(test_result$`Pr(>F)`[1],2)
  ))
}

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: Levene's test results on participants' characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```
*None of the P-values (<code>PR_Greater_F</code>) are significant. Mass seems to have the greatest relative difference in variances at p=0.08*

## Shapiro-Wilk test

Test the normality

```{r, message=FALSE, warning=FALSE}
library(car)

# Filter the data by sex
data_male <- data %>% filter(Sex == "male")
data_female <- data %>% filter(Sex == "female")

# Initialize lists to store the test results
shapiro_test_male <- list()
shapiro_test_female <- list()

# Perform Shapiro-Wilk test for each specified column
for (i in colnames(data)[3:8]) { # Adjust the column indices based on actual data structure
  shapiro_test_male[[i]] <- shapiro.test(data_male[[i]])
  shapiro_test_female[[i]] <- shapiro.test(data_female[[i]])
}

# Extract the necessary information from the test results
results_male <- data.frame(
  Variable = character(),
  Statistic_Male = numeric(),
  P_Value_Male = numeric(),
  stringsAsFactors = FALSE
)

results_female <- data.frame(
  Variable = character(),
  Statistic_Female = numeric(),
  P_Value_Female = numeric(),
  stringsAsFactors = FALSE
)

for (col in names(shapiro_test_male)) {
  test_result_male <- shapiro_test_male[[col]]
  results_male <- rbind(results_male, data.frame(
    Variable = col,
    Statistic_Male = round(test_result_male$statistic,2),
    P_Value_Male = round(test_result_male$p.value,2)
  ))
}

for (col in names(shapiro_test_female)) {
  test_result_female <- shapiro_test_female[[col]]
  results_female <- rbind(results_female, data.frame(
    Variable = col,
    Statistic_Female = round(test_result_female$statistic,2),
    P_Value_Female = round(test_result_female$p.value,2)
  ))
}

# Combine the results into one table
results_table <- merge(results_male, results_female, by = "Variable")

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: Shapiro-Wilk's test results on participants' characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")



```
*Female age doesn't seem to be normally distributed. (<code>P_Value_Female</code> = 0.001568)*

Lets plot a histogram for female age to further inspect the data 
```{r}
hist(data$Age[data$Sex == "female"])
```
Apperently there is a overrepresentation of younger female participants.

## Differences in means between sexes
Lets run a simple t-test to determine different means between the sex groups. 

```{r, message=FALSE, error=FALSE, warning=FALSE}
# Load necessary libraries
library(dplyr)
library(broom)
library(tidyr)

# Get the numeric columns from the dataframe, excluding 'Sex'
num_cols <- sapply(data, is.numeric)
num_cols <- num_cols & names(data) != "Sex"

# Initialize a list to store the t-test results
t_test_results <- list()

# Perform t-test for each numeric column
for (col in names(data)[num_cols]) {
  t_test_result <- t.test(data[[col]] ~ data$Sex)
  t_test_results[[col]] <- t_test_result
}

# Extract the necessary information from the t-test results
results_table <- data.frame(
  Variable = character(),
  Mean_Male = numeric(),
  Mean_Female = numeric(),
  t_Value = numeric(),
  df = numeric(),
  P_Value = numeric(),
  stringsAsFactors = FALSE
)

for (col in names(t_test_results)) {
  test_result <- t_test_results[[col]]
  male_mean <- mean(data[[col]][data$Sex == "male"], na.rm = TRUE)
  female_mean <- mean(data[[col]][data$Sex == "female"], na.rm = TRUE)
  
  results_table <- rbind(results_table, data.frame(
    Variable = col,
    Mean_Male = round(male_mean,2),
    Mean_Female = round(female_mean,2),
    t_Value = round(test_result$statistic,2),
    df = round(test_result$parameter,2),
    P_Value = round(test_result$p.value,2)
  ))
}

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: t-test results on participants' characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")

```
As expected, there are differences in means between sexes in height, bodymass, reported 1RM and performed 1RM. Luckily, no significant differences in mean Age or Experience seem to exist. However, the distribution of age seems to be skewed to younger participants for females.

## Skewness and kurtosis
Lets continue by determining skewness and curtosis for the variables:

```{r, message=FALSE, warning=FALSE}

library(moments)

# Get the numeric columns from the dataframe, excluding 'Sex'
num_cols <- sapply(data, is.numeric)
num_cols <- num_cols & names(data) != "Sex"

# Initialize a data frame to store the results
results_table <- data.frame(
  Variable = character(),
  Sex = character(),
  Skewness = numeric(),
  Kurtosis = numeric(),
  Skewness_Z = numeric(),
  Kurtosis_Z = numeric(),
  stringsAsFactors = FALSE
)

# Calculate skewness and kurtosis for each numeric column and each sex
for (col in names(data)[num_cols]) {
  for (sex in c("male", "female")) {
    subset_data <- data[[col]][data$Sex == sex]
    
    skewness_value <- round(skewness(subset_data, na.rm = TRUE),2)
    kurtosis_value <- round(kurtosis(subset_data, na.rm = TRUE),2)
    
    n <- length(subset_data)
    skewness_se <- sqrt(6/n)
    kurtosis_se <- sqrt(24/n)
    
    skewness_z <- round(skewness_value / skewness_se,2)
    kurtosis_z <- round((kurtosis_value - 3) / kurtosis_se,2)  # Adjust kurtosis by subtracting 3 for excess kurtosis

    results_table <- rbind(results_table, data.frame(
      Variable = col,
      Sex = sex,
      Skewness = skewness_value,
      Kurtosis = kurtosis_value,
      Skewness_Z = skewness_z,
      Kurtosis_Z = kurtosis_z
    ))
  }
}

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: skewness and kurtosis of participants' characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```

Only female age skewness is outside the [-2:2] interval. This seems to be in line with previous findings for skewness. All other values are within the accepted interval. 

## Histogram
One more check for normality: lets plot histograms of all variables, grouped by sex. 


```{r, message=FALSE, warning=FALSE}
library(ggplot2)

# Identify numeric columns excluding 'Sex'
num_cols <- names(data)[sapply(data, is.numeric) & names(data) != "Sex"]

# Plot histograms for each numeric column, grouped by sex
for (col in num_cols) {
  # Convert to numeric in case some columns are not numeric
  data[[col]] <- as.numeric(data[[col]])
  
  plot <- ggplot(data, aes_string(x = col, fill = "Sex")) +
    geom_histogram(alpha = 0.6, position = "identity") +
    labs(title = paste("Histogram of", col, "Grouped by Sex"),
         x = col,
         y = "Frequency") +
    theme_minimal() +
    facet_wrap(~Sex, scales = "free_y") +
    theme(legend.position = "top") +
    guides(fill = guide_legend(title = "Sex"))
  
  print(plot)
}

```


:::
