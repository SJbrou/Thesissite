numerical_data <- data[, numerical_columns]
# Perform MANOVA
manova_result <- manova(as.matrix(numerical_data) ~ group, data = data)
# Summary of MANOVA
manova_summary <- summary(manova_result)
# print(manova_summary)
manova_table <- data.frame(
Test = "Pillai",
Df = manova_summary$stats[1, "Df"],
Pillai = manova_summary$stats[1, "Pillai"],
Approx_F = manova_summary$stats[1, "approx F"],
Num_Df = manova_summary$stats[1, "num Df"],
Den_Df = manova_summary$stats[1, "den Df"],
Pr_F = manova_summary$stats[1, "Pr(>F)"]
)
# Print MANOVA results
kable(manova_table, caption = "Table X: Results of MANOVA") %>%
kable_styling(bootstrap_options = "striped")
# Load necessary packages
library(car)
library(MVN)
library(purrr)
library(effectsize)  # For effect size calculation
library(broom)
library(dplyr)
library(knitr)
library(kableExtra)
data2 <- data
# Check if the MANOVA is significant
if (manova_summary$stats[1, "Pr(>F)"] < 0.05) {
# cat("MANOVA is significant. Performing univariate ANOVAs:\n")
# Perform univariate ANOVAs for each dependent variable
univariate_results <- map(names(numerical_data), ~aov(as.formula(paste(.x, "~ group")), data = data2))
# Tidy the univariate ANOVA results
tidy_results <- map2(names(numerical_data), univariate_results, ~tidy(.y) %>% mutate(variable = .x))
# Combine the tidy results into a single table
univariate_table <- bind_rows(tidy_results) %>%
select(variable, everything())
# Print the univariate ANOVA table
knitr::kable(univariate_table, caption = "Table X: Results of univariate ANOVAs") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
} else {
cat("MANOVA is not significant. No further tests are performed.\n")
}
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Print the t-test results table
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
# Load necessary packages
library(car)
library(MVN)
library(purrr)
library(effectsize)  # For effect size calculation
library(broom)
library(dplyr)
library(knitr)
library(kableExtra)
data2 <- data
# Check if the MANOVA is significant
if (manova_summary$stats[1, "Pr(>F)"] < 0.05) {
# cat("MANOVA is significant. Performing univariate ANOVAs:\n")
# Perform univariate ANOVAs for each dependent variable
univariate_results <- map(names(numerical_data), ~aov(as.formula(paste(.x, "~ group")), data = data2))
# Tidy the univariate ANOVA results
tidy_results <- map2(names(numerical_data), univariate_results, ~tidy(.y) %>% mutate(variable = .x))
# Combine the tidy results into a single table
univariate_table <- bind_rows(tidy_results) %>%
select(variable, everything())
# Print the univariate ANOVA table
knitr::kable(univariate_table, caption = "Table X: Results of univariate ANOVAs") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
} else {
cat("MANOVA is not significant. No further tests are performed.\n")
}
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Print the t-test results table
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
data2 <- data
# Check if the MANOVA is significant
if (manova_summary$stats[1, "Pr(>F)"] < 0.05) {
# cat("MANOVA is significant. Performing univariate ANOVAs:\n")
# Perform univariate ANOVAs for each dependent variable
univariate_results <- map(names(numerical_data), ~aov(as.formula(paste(.x, "~ group")), data = data2))
# Tidy the univariate ANOVA results
tidy_results <- map2(names(numerical_data), univariate_results, ~tidy(.y) %>% mutate(variable = .x))
# Combine the tidy results into a single table
univariate_table <- bind_rows(tidy_results) %>%
select(variable, everything())
# Print the univariate ANOVA table
knitr::kable(univariate_table, caption = "Table X: Results of univariate ANOVAs") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
} else {
cat("MANOVA is not significant. No further tests are performed.\n")
}
# Clean workspace
rm(list = ls())
library(tidyr)
library(tidyverse)
library(dplyr)
library(plotly)
library(ggplot2)
library(knitr)
library(lubridate)
library(car)
library(kableExtra)
library(MVN)
library(purrr)
library(effectsize)
library(broom)
library(parsermd)
# Most dependencies are loaded by loading datafiltering.qmd.
# To load only the chuncks containing functions we need parsermd
library(parsermd)
toload <- c("load_data","load_plots", "filter_data", "separate_lifts", "visualise_seperate_lifts", "loadXsenseData2")
rmd <- parse_rmd("datafiltering.qmd")
for (i in seq_along(toload)) {
setup_chunk <- rmd_select(rmd, toload[i]) |>
as_document()
setup_chunk <- setup_chunk[-grep("```", setup_chunk)]
setup_chunk
#> [1] "library(tidyr)"   "library(stringr)" ""
eval(parse(text = setup_chunk))
}
rm(rmd, i, setup_chunk, toload)
loadLift <- function(dir) {
files <- list.files(path = dir, full.names = TRUE)
data <- list()
for (i in seq_along(files)) {
data[[i]] <- read.csv(files[i])
}
return(data)
}
# Load the data
data_male <- loadLift("../../lifts/male")
data_female <- loadLift("../../lifts/female")
# Function to find the maximum value for each attribute for the lift
find_col_max <- function(df_list, colname) {
# Initialize a matrix to store the maximum values
col_max <- matrix(NA, nrow = length(df_list), ncol = 5)
colnames(col_max) <- c(paste0(colname, "1"), paste0(colname, "2"), paste0(colname, "3"), paste0(colname, "4"), paste0(colname, "5"))
for (i in seq_along(df_list)) {
df <- df_list[[i]]
for (j in 1:5) {
col_max[i, j] <- max(df[[paste0(colname, j)]], na.rm = TRUE)
}
}
# Convert the matrix to a dataframe
col_max_df <- as.data.frame(col_max)
return(col_max_df)
}
# Function to find the average value for each attribute for the lift
find_col_mean <- function(df_list, colname) {
# Initialize a matrix to store the mean values
col_mean <- matrix(NA, nrow = length(df_list), ncol = 5)
colnames(col_mean) <- c(paste0(colname, "1"), paste0(colname, "2"), paste0(colname, "3"), paste0(colname, "4"), paste0(colname, "5"))
for (i in seq_along(df_list)) {
df <- df_list[[i]]
for (j in 1:5) {
col_mean[i, j] <- mean(df[[paste0(colname, j)]], na.rm = TRUE)
}
}
# Convert the matrix to a dataframe
col_mean_df <- as.data.frame(col_mean)
return(col_mean_df)
}
# calculate peak accelerations
male_PLA <- find_col_max(data_male, "A_abs")
male_PAA <- find_col_max(data_male, "Gyr_abs")
female_PLA <- find_col_max(data_female, "A_abs")
female_PAA <- find_col_max(data_female, "Gyr_abs")
# calculate average accelerations
male_ALA <- find_col_mean(data_male, "A_abs")
male_AAA <- find_col_mean(data_male, "Gyr_abs")
female_ALA <- find_col_mean(data_female, "A_abs")
female_AAA <- find_col_mean(data_female, "Gyr_abs")
names(male_PLA) <- paste0(names(male_PLA), "_PLA")
names(male_PAA) <- paste0(names(male_PAA), "_PAA")
names(male_ALA) <- paste0(names(male_ALA), "_ALA")
names(male_AAA) <- paste0(names(male_AAA), "_AAA")
names(female_PLA) <- paste0(names(female_PLA), "_PLA")
names(female_PAA) <- paste0(names(female_PAA), "_PAA")
names(female_ALA) <- paste0(names(female_ALA), "_ALA")
names(female_AAA) <- paste0(names(female_AAA), "_AAA")
# Combine the data into dataframes
d_male <- cbind(male_PLA, male_PAA, male_ALA, male_AAA)
d_female <- cbind(female_PLA, female_PAA, female_ALA, female_AAA)
# Add a group column to each dataframe
d_male <- d_male %>% mutate(group = "male")
d_female <- d_female %>% mutate(group = "female")
# Combine the dataframes
data <- bind_rows(d_male, d_female)
# Rename data headers
data <- data %>%
rename(PLA1 = A_abs1_PLA) %>%
rename(PLA2 = A_abs2_PLA) %>%
rename(PLA3 = A_abs3_PLA) %>%
rename(PLA4 = A_abs4_PLA) %>%
rename(PLA5 = A_abs5_PLA) %>%
rename(ALA1 = A_abs1_ALA) %>%
rename(ALA2 = A_abs2_ALA) %>%
rename(ALA3 = A_abs3_ALA) %>%
rename(ALA4 = A_abs4_ALA) %>%
rename(ALA5 = A_abs5_ALA) %>%
rename(PAA1 = Gyr_abs1_PAA) %>%
rename(PAA2 = Gyr_abs2_PAA) %>%
rename(PAA3 = Gyr_abs3_PAA) %>%
rename(PAA4 = Gyr_abs4_PAA) %>%
rename(PAA5 = Gyr_abs5_PAA) %>%
rename(AAA1 = Gyr_abs1_AAA) %>%
rename(AAA2 = Gyr_abs2_AAA) %>%
rename(AAA3 = Gyr_abs3_AAA) %>%
rename(AAA4 = Gyr_abs4_AAA) %>%
rename(AAA5 = Gyr_abs5_AAA)
# Round all numerical data in the dataframe
datarounded <- data %>%
mutate(across(where(is.numeric), ~ round(., 2)))
# Showing only first 10 rows
knitr::kable(datarounded, caption = "Table X: PLA, ALA, PAA and AAA for each marker per participant") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
# data2 <- data[1:24, c(1:10, 21)]  # Selecting desired rows and columns
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform MANOVA
manova_result <- manova(as.matrix(numerical_data) ~ group, data = data)
# Summary of MANOVA
manova_summary <- summary(manova_result)
# print(manova_summary)
manova_table <- data.frame(
Test = "Pillai",
Df = manova_summary$stats[1, "Df"],
Pillai = manova_summary$stats[1, "Pillai"],
Approx_F = manova_summary$stats[1, "approx F"],
Num_Df = manova_summary$stats[1, "num Df"],
Den_Df = manova_summary$stats[1, "den Df"],
Pr_F = manova_summary$stats[1, "Pr(>F)"]
)
# Print MANOVA results
kable(manova_table, caption = "Table X: Results of MANOVA") %>%
kable_styling(bootstrap_options = "striped")
data2 <- data
# Check if the MANOVA is significant
if (manova_summary$stats[1, "Pr(>F)"] < 0.05) {
# cat("MANOVA is significant. Performing univariate ANOVAs:\n")
# Perform univariate ANOVAs for each dependent variable
univariate_results <- map(names(numerical_data), ~aov(as.formula(paste(.x, "~ group")), data = data2))
# Tidy the univariate ANOVA results
tidy_results <- map2(names(numerical_data), univariate_results, ~tidy(.y) %>% mutate(variable = .x))
# Combine the tidy results into a single table
univariate_table <- bind_rows(tidy_results) %>%
select(variable, everything())
# Print the univariate ANOVA table
knitr::kable(univariate_table, caption = "Table X: Results of univariate ANOVAs") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
} else {
cat("MANOVA is not significant. No further tests are performed.\n")
}
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Print the t-test results table
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
# Clean workspace
rm(list = ls())
library(tidyr)
library(tidyverse)
library(dplyr)
library(plotly)
library(ggplot2)
library(knitr)
library(lubridate)
library(car)
library(kableExtra)
library(MVN)
library(purrr)
library(effectsize)
library(broom)
library(parsermd)
# Most dependencies are loaded by loading datafiltering.qmd.
# To load only the chuncks containing functions we need parsermd
library(parsermd)
toload <- c("load_data","load_plots", "filter_data", "separate_lifts", "visualise_seperate_lifts", "loadXsenseData2")
rmd <- parse_rmd("datafiltering.qmd")
for (i in seq_along(toload)) {
setup_chunk <- rmd_select(rmd, toload[i]) |>
as_document()
setup_chunk <- setup_chunk[-grep("```", setup_chunk)]
setup_chunk
#> [1] "library(tidyr)"   "library(stringr)" ""
eval(parse(text = setup_chunk))
}
rm(rmd, i, setup_chunk, toload)
loadLift <- function(dir) {
files <- list.files(path = dir, full.names = TRUE)
data <- list()
for (i in seq_along(files)) {
data[[i]] <- read.csv(files[i])
}
return(data)
}
# Load the data
data_male <- loadLift("../../lifts/male")
data_female <- loadLift("../../lifts/female")
# Function to find the maximum value for each attribute for the lift
find_col_max <- function(df_list, colname) {
# Initialize a matrix to store the maximum values
col_max <- matrix(NA, nrow = length(df_list), ncol = 5)
colnames(col_max) <- c(paste0(colname, "1"), paste0(colname, "2"), paste0(colname, "3"), paste0(colname, "4"), paste0(colname, "5"))
for (i in seq_along(df_list)) {
df <- df_list[[i]]
for (j in 1:5) {
col_max[i, j] <- max(df[[paste0(colname, j)]], na.rm = TRUE)
}
}
# Convert the matrix to a dataframe
col_max_df <- as.data.frame(col_max)
return(col_max_df)
}
# Function to find the average value for each attribute for the lift
find_col_mean <- function(df_list, colname) {
# Initialize a matrix to store the mean values
col_mean <- matrix(NA, nrow = length(df_list), ncol = 5)
colnames(col_mean) <- c(paste0(colname, "1"), paste0(colname, "2"), paste0(colname, "3"), paste0(colname, "4"), paste0(colname, "5"))
for (i in seq_along(df_list)) {
df <- df_list[[i]]
for (j in 1:5) {
col_mean[i, j] <- mean(df[[paste0(colname, j)]], na.rm = TRUE)
}
}
# Convert the matrix to a dataframe
col_mean_df <- as.data.frame(col_mean)
return(col_mean_df)
}
# calculate peak accelerations
male_PLA <- find_col_max(data_male, "A_abs")
male_PAA <- find_col_max(data_male, "Gyr_abs")
female_PLA <- find_col_max(data_female, "A_abs")
female_PAA <- find_col_max(data_female, "Gyr_abs")
# calculate average accelerations
male_ALA <- find_col_mean(data_male, "A_abs")
male_AAA <- find_col_mean(data_male, "Gyr_abs")
female_ALA <- find_col_mean(data_female, "A_abs")
female_AAA <- find_col_mean(data_female, "Gyr_abs")
names(male_PLA) <- paste0(names(male_PLA), "_PLA")
names(male_PAA) <- paste0(names(male_PAA), "_PAA")
names(male_ALA) <- paste0(names(male_ALA), "_ALA")
names(male_AAA) <- paste0(names(male_AAA), "_AAA")
names(female_PLA) <- paste0(names(female_PLA), "_PLA")
names(female_PAA) <- paste0(names(female_PAA), "_PAA")
names(female_ALA) <- paste0(names(female_ALA), "_ALA")
names(female_AAA) <- paste0(names(female_AAA), "_AAA")
# Combine the data into dataframes
d_male <- cbind(male_PLA, male_PAA, male_ALA, male_AAA)
d_female <- cbind(female_PLA, female_PAA, female_ALA, female_AAA)
# Add a group column to each dataframe
d_male <- d_male %>% mutate(group = "male")
d_female <- d_female %>% mutate(group = "female")
# Combine the dataframes
data <- bind_rows(d_male, d_female)
# Rename data headers
data <- data %>%
rename(PLA1 = A_abs1_PLA) %>%
rename(PLA2 = A_abs2_PLA) %>%
rename(PLA3 = A_abs3_PLA) %>%
rename(PLA4 = A_abs4_PLA) %>%
rename(PLA5 = A_abs5_PLA) %>%
rename(ALA1 = A_abs1_ALA) %>%
rename(ALA2 = A_abs2_ALA) %>%
rename(ALA3 = A_abs3_ALA) %>%
rename(ALA4 = A_abs4_ALA) %>%
rename(ALA5 = A_abs5_ALA) %>%
rename(PAA1 = Gyr_abs1_PAA) %>%
rename(PAA2 = Gyr_abs2_PAA) %>%
rename(PAA3 = Gyr_abs3_PAA) %>%
rename(PAA4 = Gyr_abs4_PAA) %>%
rename(PAA5 = Gyr_abs5_PAA) %>%
rename(AAA1 = Gyr_abs1_AAA) %>%
rename(AAA2 = Gyr_abs2_AAA) %>%
rename(AAA3 = Gyr_abs3_AAA) %>%
rename(AAA4 = Gyr_abs4_AAA) %>%
rename(AAA5 = Gyr_abs5_AAA)
# Round all numerical data in the dataframe
datarounded <- data %>%
mutate(across(where(is.numeric), ~ round(., 2)))
# Showing only first 10 rows
knitr::kable(datarounded, caption = "Table X: PLA, ALA, PAA and AAA for each marker per participant") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
# data2 <- data[1:24, c(1:10, 21)]  # Selecting desired rows and columns
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform MANOVA
manova_result <- manova(as.matrix(numerical_data) ~ group, data = data)
# Summary of MANOVA
manova_summary <- summary(manova_result)
# print(manova_summary)
manova_table <- data.frame(
Test = "Pillai",
Df = manova_summary$stats[1, "Df"],
Pillai = manova_summary$stats[1, "Pillai"],
Approx_F = manova_summary$stats[1, "approx F"],
Num_Df = manova_summary$stats[1, "num Df"],
Den_Df = manova_summary$stats[1, "den Df"],
Pr_F = manova_summary$stats[1, "Pr(>F)"]
)
# Print MANOVA results
kable(manova_table, caption = "Table X: Results of MANOVA") %>%
kable_styling(bootstrap_options = "striped")
data2 <- data
# Check if the MANOVA is significant
if (manova_summary$stats[1, "Pr(>F)"] < 0.05) {
# cat("MANOVA is significant. Performing univariate ANOVAs:\n")
# Perform univariate ANOVAs for each dependent variable
univariate_results <- map(names(numerical_data), ~aov(as.formula(paste(.x, "~ group")), data = data2))
# Tidy the univariate ANOVA results
tidy_results <- map2(names(numerical_data), univariate_results, ~tidy(.y) %>% mutate(variable = .x))
# Combine the tidy results into a single table
univariate_table <- bind_rows(tidy_results) %>%
select(variable, everything())
# Print the univariate ANOVA table
knitr::kable(univariate_table, caption = "Table X: Results of univariate ANOVAs") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
} else {
cat("MANOVA is not significant. No further tests are performed.\n")
}
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Print the t-test results table
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Print the t-test results table
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
bonferroni_corrected_[]
bonferroni_corrected_p
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Print the t-test results table
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
# Assuming 'data' is your dataframe and 'group' column indicates 'male' or 'female'
# Separate numerical columns and the 'group' column
numerical_columns <- sapply(data, is.numeric)
numerical_data <- data[, numerical_columns]
# Perform t-tests for each numerical column
t_test_results <- map(names(numerical_data), ~ t.test(as.formula(paste(.x, "~ group")), data = data) %>% tidy())
# Combine the t-test results into a single table
t_test_table <- bind_rows(t_test_results) %>%
mutate(variable = names(numerical_data)) %>%
select(variable, everything())
# Apply Bonferroni correction
alpha <- 0.05
bonferroni_corrected_p <- p.adjust(t_test_table$p.value, method = "bonferroni")
t_test_table <- t_test_table %>% mutate(bonferroni_p = bonferroni_corrected_p)
# Print the t-test results table with Bonferroni correction
knitr::kable(t_test_table, caption = "Table X: Results of t-tests between groups with Bonferroni correction") %>%
kableExtra::kable_styling(bootstrap_options = "striped")
