---
title: "Analysis of lifts"
author: "Stan Brouwer"
format:
  html:
    toc: true
    toc-location: left
    toc-depth: 1
    embed-resources: true
    # standalone: true
    smooth-scroll: true
    page-layout: full
    code-fold: show
    grid:
      sidebar-width: 180px
editor: source
number-sections: false
---

This is the code used to analyse the biomechanical characteristics of each lift. 

::: column-page-right


```{r startUp, message = FALSE, verbose = FALSE, echo=FALSE}
# Clean workspace
rm(list = ls())
library(tidyr)
library(tidyverse)
library(dplyr)
library(plotly)
library(ggplot2)
library(knitr)
library(lubridate)
library(car)

# Most dependencies are loaded by loading datafiltering.qmd.
# To load only the chuncks containing functions we need parsermd
library(parsermd)

toload <- c("load_data","load_plots", "filter_data", "separate_lifts", "visualise_seperate_lifts", "loadXsenseData2")
rmd <- parse_rmd("datafiltering.qmd")


for (i in seq_along(toload)) {
  setup_chunk <- rmd_select(rmd, toload[i]) |> 
    as_document()

  setup_chunk <- setup_chunk[-grep("```", setup_chunk)]
  setup_chunk
#> [1] "library(tidyr)"   "library(stringr)" ""                

  eval(parse(text = setup_chunk))             
}
rm(rmd, i, setup_chunk, toload)
```

Lets load all lift data and calculate peak and average linear and angular accelerations
```{r LoadData, message = FALSE, verbose = FALSE}
loadLift <- function(dir) {
  files <- list.files(path = dir, full.names = TRUE)
  data <- list()
  
  for (i in seq_along(files)) {
    data[[i]] <- read.csv(files[i])
  }
  return(data)
}

# Load the data
data_male <- loadLift("../../lifts/male")
data_female <- loadLift("../../lifts/female")

# Function to find the maximum value for each attribute for the lift
find_col_max <- function(df_list, colname) {
  # Initialize a matrix to store the maximum values
  col_max <- matrix(NA, nrow = length(df_list), ncol = 5)
  colnames(col_max) <- c(paste0(colname, "1"), paste0(colname, "2"), paste0(colname, "3"), paste0(colname, "4"), paste0(colname, "5"))
  
  for (i in seq_along(df_list)) {
    df <- df_list[[i]]
    for (j in 1:5) {
      col_max[i, j] <- max(df[[paste0(colname, j)]], na.rm = TRUE)
    }
  }
  # Convert the matrix to a dataframe
  col_max_df <- as.data.frame(col_max)
  
  return(col_max_df)
}

# Function to find the average value for each attribute for the lift
find_col_mean <- function(df_list, colname) {
  # Initialize a matrix to store the mean values
  col_mean <- matrix(NA, nrow = length(df_list), ncol = 5)
  colnames(col_mean) <- c(paste0(colname, "1"), paste0(colname, "2"), paste0(colname, "3"), paste0(colname, "4"), paste0(colname, "5"))
  
  for (i in seq_along(df_list)) {
    df <- df_list[[i]]
    for (j in 1:5) {
      col_mean[i, j] <- mean(df[[paste0(colname, j)]], na.rm = TRUE)
    }
  }
  # Convert the matrix to a dataframe
  col_mean_df <- as.data.frame(col_mean)
  
  return(col_mean_df)
}

# calculate peak accelerations
male_PLA <- find_col_max(data_male, "A_abs")
male_PAA <- find_col_max(data_male, "Gyr_abs")
female_PLA <- find_col_max(data_female, "A_abs")
female_PAA <- find_col_max(data_female, "Gyr_abs")

# calculate average accelerations
male_ALA <- find_col_mean(data_male, "A_abs")
male_AAA <- find_col_mean(data_male, "Gyr_abs")
female_ALA <- find_col_mean(data_female, "A_abs")
female_AAA <- find_col_mean(data_female, "Gyr_abs")

names(male_PLA) <- paste0(names(male_PLA), "_PLA")
names(male_PAA) <- paste0(names(male_PAA), "_PAA")
names(male_ALA) <- paste0(names(male_ALA), "_ALA")
names(male_AAA) <- paste0(names(male_AAA), "_AAA")
names(female_PLA) <- paste0(names(female_PLA), "_PLA")
names(female_PAA) <- paste0(names(female_PAA), "_PAA")
names(female_ALA) <- paste0(names(female_ALA), "_ALA")
names(female_AAA) <- paste0(names(female_AAA), "_AAA")

# Combine the data into dataframes
d_male <- cbind(male_PLA, male_PAA, male_ALA, male_AAA)
d_female <- cbind(female_PLA, female_PAA, female_ALA, female_AAA)

# Add a group column to each dataframe
d_male <- d_male %>% mutate(group = "male")
d_female <- d_female %>% mutate(group = "female")

# Combine the dataframes
data <- bind_rows(d_male, d_female)

# Rename data headers
data <- data %>%
  rename(PLA1 = A_abs1_PLA) %>%
  rename(PLA2 = A_abs2_PLA) %>%
  rename(PLA3 = A_abs3_PLA) %>%
  rename(PLA4 = A_abs4_PLA) %>%
  rename(PLA5 = A_abs5_PLA) %>%
  rename(ALA1 = A_abs1_ALA) %>%
  rename(ALA2 = A_abs2_ALA) %>%
  rename(ALA3 = A_abs3_ALA) %>%
  rename(ALA4 = A_abs4_ALA) %>%
  rename(ALA5 = A_abs5_ALA) %>%
  rename(PAA1 = Gyr_abs1_PAA) %>%
  rename(PAA2 = Gyr_abs2_PAA) %>%
  rename(PAA3 = Gyr_abs3_PAA) %>%
  rename(PAA4 = Gyr_abs4_PAA) %>%
  rename(PAA5 = Gyr_abs5_PAA) %>%
  rename(AAA1 = Gyr_abs1_AAA) %>%
  rename(AAA2 = Gyr_abs2_AAA) %>%
  rename(AAA3 = Gyr_abs3_AAA) %>%
  rename(AAA4 = Gyr_abs4_AAA) %>%
  rename(AAA5 = Gyr_abs5_AAA)
  
# Round all numerical data in the dataframe
datarounded <- data %>%
  mutate(across(where(is.numeric), ~ round(., 2)))
# Showing only first 10 rows
knitr::kable(datarounded, caption = "Table X: PLA, ALA, PAA and AAA for each marker per participant") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```

## Descriptive statistics

Lets check assumptions by
 - Reporting descriptives [mean ± std]
 - Levene's test for equality of variances
 - Shapiro-Wilk's test for normality
 - Z-value for skewness
 - Z-value for kurtosis
 - Histograms
 - Q-Q plots
 
### Some descriptives

Start by calculating means and std. I took some steps to format it to [mean ± std] format

```{r lets_go, message=FALSE, warning=FALSE}
# Calculate the number of participants overall and by sex
count_summary <- data %>%
  group_by(group) %>%
  summarise(count = n()) %>%
  bind_rows(summarise(data, group = "Overall", count = n()))

# Calculate the summary statistics for all subjects
column_names <- setdiff(names(data), "group")
overall_summary <- data %>%
  summarise(across(column_names, 
                   list(mean = ~ round(mean(.x, na.rm = TRUE), 2), 
                        sd = ~ sprintf("%.2f", sd(.x, na.rm = TRUE)))), 2)

# Calculate the summary statistics by sex
sex_summary <- data %>%
  group_by(group) %>%
  summarise(across(column_names, 
                   list(mean = ~ round(mean(.x, na.rm = TRUE), 2), 
                        sd = ~ sprintf("%.2f", sd(.x, na.rm = TRUE)))), 2)

# Combine the summaries into a single table
summary_table <- bind_rows(
  overall_summary %>% mutate(group = "Overall"),
  sex_summary
)

# Reshape the table for better visualization
summary_table <- summary_table %>%
  pivot_longer(cols = -group, 
               names_to = c("variable", ".value"), 
               names_sep = "_") %>%
  pivot_wider(names_from = group, values_from = c(mean, sd))

# Combine mean and sd into a single column
summary_table <- summary_table %>%
  mutate(across(ends_with("_Overall"), ~ ifelse(is.na(.), "", as.character(.))),
         Overall = paste0(mean_Overall, " ± ", sd_Overall)) %>%
  mutate(across(ends_with("_male"), ~ ifelse(is.na(.), "", as.character(.))),
         male = paste0(mean_male, " ± ", sd_male)) %>%
  mutate(across(ends_with("_female"), ~ ifelse(is.na(.), "", as.character(.))),
         female = paste0(mean_female, " ± ", sd_female)) %>%
  select(variable, Overall, male, female)

# Prepare the participant counts in the correct format
participant_counts <- count_summary %>%
  pivot_wider(names_from = group, values_from = count) %>%
  mutate(variable = "count",
         Overall = as.character(Overall),
         male = as.character(male),
         female = as.character(female))

# Combine the participant counts with the summary statistics
final_summary_table <- bind_rows(participant_counts, summary_table)

# Correct the NA values for combined mean ± sd columns
final_summary_table <- final_summary_table %>%
  mutate(Overall = ifelse(is.na(Overall), "", Overall),
         male = ifelse(is.na(male), "", male),
         female = ifelse(is.na(female), "", female))

# Change the order of the columns, edit some names
final_summary_table <- final_summary_table %>%
  select(variable, Overall, male, female)

library(gtExtras)
# Print the table using knitr::kable
knitr::kable(final_summary_table[1:21,], caption = "Table X: summary of PLA PAA ALA and AAA") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")

```

### Levene's test
Lets run levene's test to determine equality of variance 

```{r, message=FALSE, warning=FALSE}

library(car)

# Get the numerical columns from the dataframe
num_cols <- sapply(data, is.numeric)

# Exclude the column 'Sex' as it is categorical
num_cols <- num_cols & names(data) != "group"

# Initialize a list to store the test results
levene_results <- list()

# Perform Levene's test for each numerical column
for (col in names(data)[num_cols]) {
  test_result <- leveneTest(data[[col]] ~ data$group)
  levene_results[[col]] <- test_result
}

# Extract the necessary information from the test results
results_table <- data.frame(
  Variable = character(),
  F_Value = numeric(),
  Pr_Greater_F = numeric(),
  stringsAsFactors = FALSE
)

for (col in names(levene_results)) {
  test_result <- levene_results[[col]]
  results_table <- rbind(results_table, data.frame(
    Variable = col,
    F_Value = round(test_result$`F value`[1],2),
    Pr_Greater_F = round(test_result$`Pr(>F)`[1],2)
  ))
}

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: Levene's test results on participants' characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```
*The P-values(<code>PR_Greater_F</code>) of PLA3, PLA4 are significant. All others are not.*

## Shapiro-Wilk test

Test the normality

```{r, message=FALSE, warning=FALSE}
library(car)

# Filter the data by sex
data_male <- data %>% filter(group == "male")
data_female <- data %>% filter(group == "female")

# Initialize lists to store the test results
shapiro_test_male <- list()
shapiro_test_female <- list()

# Perform Shapiro-Wilk test for each specified column
for (i in colnames(data)[1:20]) { # Adjust the column indices based on actual data structure
  shapiro_test_male[[i]] <- shapiro.test(data_male[[i]])
  shapiro_test_female[[i]] <- shapiro.test(data_female[[i]])
}

# Extract the necessary information from the test results
results_male <- data.frame(
  Variable = character(),
  Statistic_Male = numeric(),
  P_Value_Male = numeric(),
  stringsAsFactors = FALSE
)

results_female <- data.frame(
  Variable = character(),
  Statistic_Female = numeric(),
  P_Value_Female = numeric(),
  stringsAsFactors = FALSE
)

for (col in names(shapiro_test_male)) {
  test_result_male <- shapiro_test_male[[col]]
  results_male <- rbind(results_male, data.frame(
    Variable = col,
    Statistic_Male = round(test_result_male$statistic,2),
    P_Value_Male = round(test_result_male$p.value,2)
  ))
}

for (col in names(shapiro_test_female)) {
  test_result_female <- shapiro_test_female[[col]]
  results_female <- rbind(results_female, data.frame(
    Variable = col,
    Statistic_Female = round(test_result_female$statistic,2),
    P_Value_Female = round(test_result_female$p.value,2)
  ))
}

# Combine the results into one table
results_table <- merge(results_male, results_female, by = "Variable")

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: Shapiro-Wilk's test results on participants' characteristics") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")



```
*With lots of significant P-values, this data does not seem to be very normaly distributed*


### Skewness and kurtosis
Lets continue by determining skewness and kurtosis for the variables:

```{r, message=FALSE, warning=FALSE}

library(moments)

# Get the numeric columns from the dataframe, excluding 'Sex'
num_cols <- sapply(data, is.numeric)
num_cols <- num_cols & names(data) != "group"

# Initialize a data frame to store the results
results_table <- data.frame(
  Variable = character(),
  Sex = character(),
  Skewness = numeric(),
  Kurtosis = numeric(),
  Skewness_Z = numeric(),
  Kurtosis_Z = numeric(),
  stringsAsFactors = FALSE
)

# Calculate skewness and kurtosis for each numeric column and each sex
for (col in names(data)[num_cols]) {
  for (sex in c("male", "female")) {
    subset_data <- data[[col]][data$group == sex]
    
    skewness_value <- round(skewness(subset_data, na.rm = TRUE),2)
    kurtosis_value <- round(kurtosis(subset_data, na.rm = TRUE),2)
    
    n <- length(subset_data)
    skewness_se <- sqrt(6/n)
    kurtosis_se <- sqrt(24/n)
    
    skewness_z <- round(skewness_value / skewness_se,2)
    kurtosis_z <- round((kurtosis_value - 3) / kurtosis_se,2)  # Adjust kurtosis by subtracting 3 for excess kurtosis

    results_table <- rbind(results_table, data.frame(
      Variable = col,
      Sex = sex,
      Skewness = skewness_value,
      Kurtosis = kurtosis_value,
      Skewness_Z = skewness_z,
      Kurtosis_Z = kurtosis_z
    ))
  }
}

# Print the results in a nice table
knitr::kable(results_table, caption = "Table X: skewness and kurtosis of PLA PAA ALA AAA") %>%
  kableExtra::kable_styling(bootstrap_options = "striped")
```
*With 13 out of 40 Z-values outside of the [-2:2] interval, this does not suggest true normal distribution

## Histogram
One more check for normality: lets plot histograms of all variables, grouped by sex. 


```{r, message=FALSE, warning=FALSE}
library(ggplot2)

# Identify numeric columns excluding 'Sex'
num_cols <- names(data)[sapply(data, is.numeric) & names(data) != "group"]

# Plot histograms for each numeric column, grouped by sex
for (col in num_cols) {
  # Convert to numeric in case some columns are not numeric
  data[[col]] <- as.numeric(data[[col]])
  
  plot <- ggplot(data, aes_string(x = col, fill = "group")) +
    geom_histogram(alpha = 0.6, position = "identity") +
    labs(title = paste("Histogram of", col, "Grouped by Sex"),
         x = col,
         y = "Frequency") +
    theme_minimal() +
    facet_wrap(~group, scales = "free_y") +
    theme(legend.position = "top") +
    guides(fill = guide_legend(title = "Sex"))
  
  print(plot)
}

```







:::
