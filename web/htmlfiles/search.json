[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Thesis",
    "section": "",
    "text": "Thesis\nHere I’ll provide all the data for my thesis. Hosting it makes it easy to show the analysises that I do. Code is provided in the code, and also hosted complementary on github.\nFirst drafts of my thesis, presentation, collected data and scripts will be available here.",
    "crumbs": [
      "Home"
    ]
  },
  {
    "objectID": "LoadXsense.html",
    "href": "LoadXsense.html",
    "title": "1  LoadXsense",
    "section": "",
    "text": "2 Explore Dot Data",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>LoadXsense</span>"
    ]
  },
  {
    "objectID": "LoadXsense.html#correct-time",
    "href": "LoadXsense.html#correct-time",
    "title": "1  LoadXsense",
    "section": "2.1 Correct Time?",
    "text": "2.1 Correct Time?\nObviously, not all IMU’s will register time on the exact same moment. Also, the amount of registrations per IMU differed: FreeAcc_X is of differing length per IMU. I suspect this to be due to the command stopping the IMU’s taking longer to reach and procces the different units.\nAssuming that the time is synchronised across the IMU’s, and that absolute time is expressed in SampleTimeFine, it would be usefull to(1) Temporally realigning the data (2) Convert time to a more human readable format\nSince time is given in microseconds, dividing by 1e6 converts it to seconds. It would be usefull to define t0 as the lowest value, and substract it from all other values. data\\(TimeS &lt;- (data\\)SampleTimeFine / 1e6) - (data$SampleTimeFine[1] / 1e6)\nTemporally realigning data is more work. See the code below for my inplementation where I assumed that similar values of SampleTimeFine indicate similar temporality.\n\n\nCode for loading the data\n\n\n# Clean workspace and load dependencies\nrm(list = ls())\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(plotly)\nlibrary(ggplot2)\nlibrary(knitr)\nlibrary(lubridate)\n\n# Function to load Xsense data (and convert time to seconds)\nLoadXsenseData &lt;- function(directory) {\n# directory &lt;- \"../../Data/20240419_104713\"\n\n  files &lt;- list.files(path = directory, full.names = TRUE)  # Searches each marker file\n  data_list &lt;- lapply(files, function(file) { # creates a list storing the data\n    data &lt;- read.csv(file, header = TRUE, skip = 10) # reads each cvs file\n    # data$TimeS &lt;- (data$SampleTimeFine / 1e6) - (data$SampleTimeFine[1] / 1e6) # Converts time to seconds\n    return(data)\n  })\n  names(data_list) &lt;- paste0(\"data\", seq_along(data_list))  # Names elements to my preference\n  \n## Re-align time\n  min_time &lt;- min(sapply(data_list, function(df) min(df$SampleTimeFine))) #  Identify the minimum SampleTimeFine value across all data\n  adjusted_data_list &lt;- lapply(data_list, function(df) { # Subtract min_time from SampleTimeFine for each dataframe in data_list\n    df$SampleTimeFine &lt;- df$SampleTimeFine - min_time\n    return(df)\n  })\n\n# This is intresting. After substracting the min_time, it seemed that longer lists had a smaller minimum time, and that all time could only differ by 1/60 of a second (or 16667 SampleTimeFine). \n# Thus, equaling lists in lenght by substracting the first values of longer lists, should ensure that the times are well-alligned\n\n# Removing first elements of longer list\n# Find the minimum number of rows among all dataframes\n  min_rows &lt;- min(sapply(adjusted_data_list, nrow))\n\n# Remove elements from the beginning of each dataframe in adjusted_data_list\n  adjusted_data_list &lt;- lapply(adjusted_data_list, function(df) {\n    if (nrow(df) &gt; min_rows) {\n      df &lt;- df[(nrow(df) - min_rows + 1):nrow(df), , drop = FALSE]  # Remove elements from the beginning\n    }\n    return(df)\n  })\n  \n\n  \n  list2env(adjusted_data_list, envir = .GlobalEnv)  # Unpack the list into the global environment\n    # Define Markers dataframe\n  markers &lt;- data.frame(\n  PacketCounter = data1$PacketCounter,\n  SampleTimeFine = data1$SampleTimeFine,\n  A_X1 = data1$FreeAcc_X,\n  A_X2 = data2$FreeAcc_X,\n  A_X3 = data3$FreeAcc_X,\n  A_X4 = data4$FreeAcc_X,\n  A_X5 = data5$FreeAcc_X,\n  \n  A_Y1 = data1$FreeAcc_Y,\n  A_Y2 = data2$FreeAcc_Y,\n  A_Y3 = data3$FreeAcc_Y,\n  A_Y4 = data4$FreeAcc_Y,\n  A_Y5 = data5$FreeAcc_Y,\n  \n  A_Z1 = data1$FreeAcc_Z,\n  A_Z2 = data2$FreeAcc_Z,\n  A_Z3 = data3$FreeAcc_Z,\n  A_Z4 = data4$FreeAcc_Z,\n  A_Z5 = data5$FreeAcc_Z\n  )\n  return(markers)\n}\n\n\n\nmarkers &lt;- LoadXsenseData(\"../../Data/20240419_104713\") # Execute function loading data\n\n# Plots for A_X\nplot &lt;- plot_ly()\nfor (i in 1:5) { # Add traces for each A_X column with different colors\n  plot &lt;- plot %&gt;% \n    add_trace(data = markers, x = ~SampleTimeFine, y = as.formula(paste0(\"~A_X\", i)), \n              type = 'scatter', mode = 'lines', name = paste(\"marker\", i))\n}\n# Customize layout\nplot_A_X &lt;- plot %&gt;% \n  layout(xaxis = list(title = \"Sample Time Fine\"),\n         yaxis = list(title = \"Acceleration\"),\n         title = \"Acceleration vs. Sample Time Fine\")\n\n# Plots for A_Y\nplot_A_Y &lt;- plot_ly()\nfor (i in 1:5) { # Add traces for each A_Y column with different colors\n  plot_A_Y &lt;- plot_A_Y %&gt;% \n    add_trace(data = markers, x = ~SampleTimeFine, y = as.formula(paste0(\"~A_Y\", i)), \n              type = 'scatter', mode = 'lines', name = paste(\"marker\", i))\n}\n# Customize layout\nplot_A_Y &lt;- plot_A_Y %&gt;% \n  layout(xaxis = list(title = \"Sample Time Fine\"),\n         yaxis = list(title = \"Acceleration\"),\n         title = \"Acceleration vs. Sample Time Fine (A_Y)\")\n\n# Plots for A_Z\nplot_A_Z &lt;- plot_ly()\nfor (i in 1:5) { # Add traces for each A_Z column with different colors\n  plot_A_Z &lt;- plot_A_Z %&gt;% \n    add_trace(data = markers, x = ~SampleTimeFine, y = as.formula(paste0(\"~A_Z\", i)), \n              type = 'scatter', mode = 'lines', name = paste(\"marker\", i))\n}\n# Customize layout\nplot_A_Z &lt;- plot_A_Z %&gt;% \n  layout(xaxis = list(title = \"Sample Time Fine\"),\n         yaxis = list(title = \"Acceleration\"),\n         title = \"Acceleration vs. Sample Time Fine (A_Z)\")",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>LoadXsense</span>"
    ]
  }
]